name: Stop ECS Service
on:
  workflow_dispatch:
    inputs:
      aws-account:
        type: choice
        description: "Which aws account service is hosted"
        options:
          - adl
          - adx
          - adv
      application-name:
        description: 'Enter Application Name'
        required: true
      environment:
        type: choice
        description: "which environment to build"
        options:
          - dev
          - qastg
          - qalv
          - pqa
        default: "dev"

jobs:
  stop_start_ecs_service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Check ECS service status
        id: ecs_status
        run: |
          status=$(aws ecs describe-services --cluster ${{ github.event.inputs.aws-account}}-${{ github.event.inputs.application-name}}-${{ github.event.inputs.environment }} --services ${{ github.event.inputs.aws-account}}-${{ github.event.inputs.application-name}}-${{ github.event.inputs.environment }} --query 'services[0].status')
          echo "Service_Status=$status" >> $GITHUB_ENV
          echo "Service status: $status"
          if [[ $status == 'ServiceNotFound' ]]; then
            echo "::error::ECS service not found: $service_name"
            exit 1
          fi

      - name: Get running task count
        id: task_count
        run: |
          count=$(aws ecs describe-services --cluster ${{ github.event.inputs.aws-account}}-${{ github.event.inputs.application-name}}-${{ github.event.inputs.environment }} --services ${{ github.event.inputs.aws-account}}-${{ github.event.inputs.application-name}}-${{ github.event.inputs.environment }} --query 'services[0].runningCount')
          echo "TASK_COUNT=$count" >> $GITHUB_ENV
          echo "Running Task Count: $count"
          
      - name: Check running task count
        run: |
          if [[ ${{ env.TASK_COUNT }} == "null" ]]; then
            echo "No running tasks. Stopping pipeline execution."
            exit 0
          else
            echo "There are running tasks. Continuing pipeline execution."
          fi
          
      - name: Create SSM parameter
        if: ${{ steps.check_task_count.outputs.status == 'There are running tasks. Continuing pipeline execution.' }}
        run: |
          aws ssm put-parameter --name --cluster ${{ github.event.inputs.aws-account}}-${{ github.event.inputs.application-name}}-${{ github.event.inputs.environment }} --services ${{ github.event.inputs.aws-account}}-${{ github.event.inputs.application-name}}-${{ github.event.inputs.environment }} --value ${{ env.TASK_COUNT }} --type String --overwrite

          
          
          
          
          
          
          
          
      
      
      
      
      
      
