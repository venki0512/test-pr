name: My cluster
on:
  workflow_dispatch:
    inputs:
      cluster-name:
        description: 'ECS Cluster Name'
        required: true
      service-name:
        description: 'ECS Service Name'
        required: true
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR      

jobs:
  stop_service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Check ECS service status
        id: ecs_status
        run: |
          status=$(aws ecs describe-services --cluster ${{ github.event.inputs.cluster-name }} --services ${{ github.event.inputs.service-name }} --query 'services[0].status')
          echo "Service_Status=$status" >> $GITHUB_ENV
          echo "Service status: $status"

      - name: Get running task count
        id: task_count
        run: |
          count=$(aws ecs describe-services --cluster ${{ github.event.inputs.cluster-name }} --services ${{ github.event.inputs.service-name }} --query 'services[0].runningCount')
          echo "TASK_COUNT=$count" >> $GITHUB_ENV
          echo "Running Task Count: $count"
        
      - name: Create SSM parameter
        run: |
          if [[ "${{ env.TASK_COUNT }}" != "0" ]]; then
          aws ssm put-parameter --name /adl/nonprod/${{ github.event.inputs.cluster-name }} --value ${{ env.TASK_COUNT }} --type String --overwrite
          else
          echo "Task count is 0. Skipping parameter creation."
          fi
     
      - name: Get EC2 instance details
        id: ec2_details
        run: |
          if [[ "${{ env.TASK_COUNT }}" != "0" ]]; then
          arns=$(aws ecs list-tasks --cluster ${{ github.event.inputs.cluster-name }} --service-name ${{ github.event.inputs.service-name }} --query 'taskArns[*]' --output text)
          task_ids=""
          instance_ids=""
          container_instance_ids=""
          for arn in $arns; do
            task_id=$(echo "$arn" | awk -F '/' '{print $NF}')
            task_ids="$task_ids $task_id"
            container_instance_arn=$(aws ecs describe-tasks --cluster ${{ github.event.inputs.cluster-name }} --tasks $arn --query 'tasks[*].containerInstanceArn' --output text)
            instance_id=$(aws ecs describe-container-instances --cluster ${{ github.event.inputs.cluster-name }} --container-instances $container_instance_arn --query 'containerInstances[*].ec2InstanceId' --output text)
            container_instance_id=$(aws ecs describe-container-instances --cluster ${{ github.event.inputs.cluster-name }} --container-instances $container_instance_arn --query 'containerInstances[*].containerInstanceArn' --output text | awk -F '/' '{print $NF}')
            instance_ids="$instance_ids $instance_id"
            container_instance_ids="$container_instance_ids $container_instance_id"
          done
          echo "TASK_IDS=$task_ids" >> $GITHUB_ENV
          echo "INSTANCE_IDS=$instance_ids" >> $GITHUB_ENV
          echo "CONTAINER_INSTANCE_IDS=$container_instance_ids" >> $GITHUB_ENV
          echo "Container Instance ID list: $container_instance_ids"
          echo "Associated EC2 Instance IDs: $instance_ids"
          else
          echo "Task count is 0. Skipping.."
          fi

      
#       - name: Get EC2 instance details
#         id: ec2_details
#         run: |
#           if [[ "${{ env.TASK_COUNT }}" != "0" ]]; then
#           arns=$(aws ecs list-tasks --cluster ${{ github.event.inputs.cluster-name }} --service-name ${{ github.event.inputs.service-name }} --query 'taskArns[*]' --output text)
#           task_ids=""
#           instance_ids=""
#           container_instance_arns=""
#           for arn in $arns; do
#             task_id=$(echo "$arn" | awk -F '/' '{print $NF}')
#             task_ids="$task_ids $task_id"
#             container_instance_arn=$(aws ecs describe-tasks --cluster ${{ github.event.inputs.cluster-name }} --tasks $arn --query 'tasks[*].containerInstanceArn' --output text)
#             instance_id=$(aws ecs describe-container-instances --cluster ${{ github.event.inputs.cluster-name }} --container-instances $container_instance_arn --query 'containerInstances[*].ec2InstanceId' --output text)
#             instance_ids="$instance_ids $instance_id"
#             container_instance_arns="$container_instance_arns $container_instance_arn"
#           done
#           echo "TASK_IDS=$task_ids" >> $GITHUB_ENV
#           echo "INSTANCE_IDS=$instance_ids" >> $GITHUB_ENV
#           echo "Container_Instance_Arns=$container_instance_arn" >> $GITHUB_ENV
#           echo "Container Instance Arn list: $container_instance_arns"
#           echo "Associated EC2 Instance IDs: $instance_ids"
#           else
#           echo "Task count is 0. Skipping.."
#           fi
        
#       - name: Stop running tasks
#         run: |
#           if [[ "${{ env.TASK_COUNT }}" != "0" ]]; then
#           aws ecs update-service --cluster ${{ github.event.inputs.cluster-name }} --service ${{ github.event.inputs.service-name }} --desired-count 0
#           echo "Stopped running tasks by setting desired count to 0."
#           else
#           echo "No running tasks to stop."
#           fi

#       - name: Sleep for 1 minute
#         run: |
#          if [[ "${{ env.TASK_COUNT }}" != "0" ]]; then
#          echo "Waiting for 1 minutes..."
#          sleep 60
#          else
#           echo "Task count is 0. Skipping.."
#          fi
       

#       - name: Check running tasks on EC2
#         id: running_tasks
#         run: |
#          if [[ -n "${{ env.EC2_INSTANCE_ID }}" ]]; then
#           running_tasks=$(aws ecs describe-container-instances --container-instances ${{ env.CONTAINER_INSTANCE_ARN }} --cluster ${{ github.event.inputs.cluster-name }} --query 'containerInstances[0].runningTasksCount' --output text)
#           echo "RUNNING_TASKS=$running_tasks" >> $GITHUB_ENV
#           echo "Running tasks on EC2: $running_tasks"
#          else
#           echo "No running tasks on EC2."
#          fi
          
#       - name: Terminate EC2 instance if no running tasks
#         if: ${{ env.RUNNING_TASKS == 0 && env.EC2_INSTANCE_ID != '' }}
#         run: |
#           echo "Terminating EC2 instance: ${{ env.EC2_INSTANCE_ID }}"
#           aws ec2 terminate-instances --instance-ids ${{ env.EC2_INSTANCE_ID }}
          
          
          
#########################################
        
#       - name: Stop running tasks
#         run: |
#            if [[ "${{ env.TASK_COUNT }}" != "0" ]]; then
#            new_task_count=$(aws ecs update-service --cluster ${{ github.event.inputs.cluster-name }} --service ${{ github.event.inputs.service-name }} --desired-count 0)
#            echo "Stopped running tasks" 
#            echo "NEW_RUNNING_TASKS=$new_task_count" >> $GITHUB_ENV
#            else
#            echo "Task count is 0. Skipping.."
#            fi

          
          
          
          
          
          
          
          
          
          
    
#   start_service:
#     runs-on: ubuntu-latest
#     needs: stop_service
#     environment:
#       name: ${{ github.event.inputs.environment }}
      
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
#           aws-region: eu-west-1
          
#       - name: Read count value from SSM parameter
#         id: read_ssm_parameter
#         run: |
#           count=$(aws ssm get-parameter --name ${{ github.event.inputs.cluster-name }} --query 'Parameter.Value' --output text)
#           echo "TASK_COUNT=$count" >> $GITHUB_ENV
#           echo "Read Task Count from SSM: $count"

#       - name: Start tasks
#         run: |
#           aws ecs update-service --cluster ${{ github.event.inputs.cluster-name }} --service ${{ github.event.inputs.service-name }} --desired-count ${{ env.TASK_COUNT }}
#           echo "Started"
