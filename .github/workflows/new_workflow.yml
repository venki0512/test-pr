name: My cluster
on:
  workflow_dispatch:
    inputs:
      cluster-name:
        description: 'ECS Cluster Name'
        required: true
      service-name:
        description: 'ECS Service Name'
        required: true
permissions:
      id-token: write # This is required for aws oidc connection
      contents: read # This is required for actions/checkout
      pull-requests: write # This is required for gh bot to comment PR      

jobs:
  stop_service:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Check ECS service status
        id: ecs_status
        run: |
          status=$(aws ecs describe-services --cluster ${{ github.event.inputs.cluster-name }} --services ${{ github.event.inputs.service-name }} --query 'services[0].status')
          echo "Service_Status=$status" >> $GITHUB_ENV
          echo "Service status: $status"

      - name: Get running task count
        id: task_count
        run: |
          count=$(aws ecs describe-services --cluster ${{ github.event.inputs.cluster-name }} --services ${{ github.event.inputs.service-name }} --query 'services[0].runningCount')
          echo "TASK_COUNT=$count" >> $GITHUB_ENV
          echo "Running Task Count: $count"
          
      - name: Stop pipeline if task count is zero
        if: ${{ steps.task_count.outputs.TASK_COUNT == '0' }}
        run: |
          echo "Task count is zero or null. Exiting gracefully."
          exit 0
        
      - name: Create SSM parameter
        run: |
          aws ssm put-parameter --name /adl/nonprod/${{ github.event.inputs.cluster-name }} --value ${{ env.TASK_COUNT }} --type String --overwrite
                 
      - name: Get EC2 instance details
        id: ec2_details
        run: |
          task_arn=$(aws ecs list-tasks --cluster ${{ github.event.inputs.cluster-name }} --service ${{ github.event.inputs.service-name }} --query 'taskArns[0]')
          echo "Arn for Task: $task_arn"
          # Extract the task ID from the ARN
          task_id=$(basename "$task_arn" | tr -d '"')
          echo "Task ID: $task_id"
          container_instance_arn=$(aws ecs describe-tasks --cluster ${{ github.event.inputs.cluster-name }} --tasks $task_id --query 'tasks[0].containerInstanceArn' --output text)
          echo "container instance arn is $container_instance_arn"
          ec2_instance_id=$(aws ecs describe-container-instances --container-instances $container_instance_arn --cluster ${{ github.event.inputs.cluster-name }} --query 'containerInstances[0].ec2InstanceId' --output text)
          echo "EC2_INSTANCE_ID=$ec2_instance_id" >> $GITHUB_ENV
          echo "EC2 instance ID: $ec2_instance_id"

      - name: Stop running tasks
        run: |
          aws ecs update-service --cluster ${{ github.event.inputs.cluster-name }} --service ${{ github.event.inputs.service-name }} --desired-count 0
          echo "Stopped running tasks" 

      - name: Check other running tasks
        id: other_running_tasks
        run: |
          other_tasks_count=$(aws ecs list-tasks --cluster ${{ github.event.inputs.cluster-name }} --container-instance $container_instance_arn --query 'length(taskArns)')
          echo "OTHER_RUNNING_TASKS_COUNT=$other_tasks_count" >> $GITHUB_ENV
          echo "Other Running Tasks Count: $other_tasks_count"

      - name: Terminate EC2 instance if other running tasks count is zero
        if: ${{ steps.other_running_tasks.outputs.OTHER_RUNNING_TASKS_COUNT == '0' }}
        run: |
          echo "No other running tasks. Terminating EC2 instance: $ec2_instance_id"
          aws ec2 terminate-instances --instance-ids $ec2_instance_id
          
          
#       - name: Check other running tasks
#         id: other_running_tasks
#         run: |
#           other_tasks_count=$(aws ecs describe-container-instances --container-instances $container_instance_arn --cluster ${{ github.event.inputs.cluster-name }} --query 'containerInstances[0].runningTasksCount')
#           echo "OTHER_RUNNING_TASKS_COUNT=$other_tasks_count" >> $GITHUB_ENV
#           echo "Other Running Tasks Count: $other_tasks_count"

#       - name: Terminate EC2 instance if no other tasks are running
#         if: ${{ env.OTHER_RUNNING_TASKS_COUNT == "0" }}
#         run: |
#           echo "Terminating EC2 instance: ${{ env.EC2_INSTANCE_ID }}"
#           aws ec2 terminate-instances --instance-ids ${{ env.EC2_INSTANCE_ID }}
          
          
          
          
          
          
          
          
          
          
    
#   start_service:
#     runs-on: ubuntu-latest
#     needs: stop_service
#     environment:
#       name: ${{ github.event.inputs.environment }}
      
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
#           aws-region: eu-west-1
          
#       - name: Read count value from SSM parameter
#         id: read_ssm_parameter
#         run: |
#           count=$(aws ssm get-parameter --name ${{ github.event.inputs.cluster-name }} --query 'Parameter.Value' --output text)
#           echo "TASK_COUNT=$count" >> $GITHUB_ENV
#           echo "Read Task Count from SSM: $count"

#       - name: Start tasks
#         run: |
#           aws ecs update-service --cluster ${{ github.event.inputs.cluster-name }} --service ${{ github.event.inputs.service-name }} --desired-count ${{ env.TASK_COUNT }}
#           echo "Started"
